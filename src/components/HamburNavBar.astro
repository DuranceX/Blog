---
import Config from '@/store/config'
import DarkmodeToggle from './DarkmodeToggle.astro'

const config = Config.getConfig()
const links = config.menus
const logo = config.logo
const sitename = config.sitename
---

<div class="sm:hidden">
    <div class="flex flex-col w-full text-[--font-color]">
        <div class="h-16 flex flex-row justify-between items-center bg-[--nav-background-color] rounded-b-md px-6 shadow-md">
            <div class="flex items-center cursor-pointer" id="ham-logo">
                <img class="w-10 h-10 mr-2" src={logo} alt="logo">
                <span class="text-xl">{sitename}</span>
            </div>
            <div class="flex items-center">
                <button class="w-8 h-8 flex justify-center items-center" id="nav-search-btn_hambur" aria-label="搜索" type="button">
                    <i class={"iconfont icon-sousuo2 text-32 text-deepgray-light dark:text-deepgray-night"}></i>
                </button>
                <div class=" w-8 h-8 flex justify-center items-center ml-2 pb-2" id="ham-theme">
                    <DarkmodeToggle />
                </div>
                <div class="hamburger ml-3 mt-1" id="hamburger">
                    <span class="line"></span>
                    <span class="line"></span>
                    <span class="line"></span>
                </div>
            </div>
        </div>
        <div id="menuPanel" class="absolute top-16 w-full shadow-lg bg-[--menu-item-bg] text-[--font-color] opacity-0 pointer-events-none transition-opacity">
            {links.map((link:any) => (
                <div class="h-12 bg-[--menu-item-bg] active:bg-[--menu-item-bg-active]">
                    <a class="px-2 w-full h-full text-center flex items-center justify-center" href={link.url}>{link.name}</a>
                </div>
            ))}
        </div>
    </div>
</div>

<script>
function bindMenuButton(){
    let isShowMenu = true
    const menuPanel = document.getElementById('menuPanel') as HTMLElement
    const menuBtn = document.getElementById('hamburger') as HTMLElement
    menuBtn.addEventListener('click', toggleMenuPanel)
    function toggleMenuPanel() {
        isShowMenu = !isShowMenu
        if(isShowMenu){
            menuPanel.style.opacity = '0'
            menuPanel.style.pointerEvents = 'none'
        }else{
            menuPanel.style.opacity = '1'
            menuPanel.style.pointerEvents = 'all'
        }
        menuBtn.classList.toggle('is-active')
    }
}

function bindHomeButton(){
    const logo = document.getElementById('ham-logo') as HTMLElement
        logo.addEventListener('click', () => {
            window.location.href = '/'
    })
}

function bindThemeToggle() {
        const isDark = localStorage.getItem('theme') === 'dark';

        const htmlElement = document.documentElement;
        const switchBtn = document.getElementById('ham-theme')?.querySelector('div[data-name]') as HTMLElement;

        if(isDark){
            htmlElement.classList.remove('light');
            htmlElement.classList.add('dark');
        }else{
            htmlElement.classList.remove('dark');
            htmlElement.classList.add('light');
        }

        // 根据状态设置按钮初始状态
        const switchBtnCheckbox = switchBtn.firstElementChild as HTMLInputElement;
        switchBtnCheckbox.checked = isDark;
        switchBtn.addEventListener('change', () => {
            if (htmlElement.classList.contains('dark')) {
                htmlElement.classList.remove('dark');
                htmlElement.classList.add('light');
                localStorage.setItem('theme', 'light');
            } else {
                htmlElement.classList.remove('light');
                htmlElement.classList.add('dark');
                localStorage.setItem('theme', 'dark');
            }
        });
    }
    function bindSearchModal() {
      const btn = document.getElementById('nav-search-btn_hambur') as HTMLElement;
      const modal = document.getElementById('search-modal-root') as HTMLElement;
      
      btn.addEventListener('click', () => {
        modal.style.display = '';
        setTimeout(() => {
          const input = document.getElementById('search-input');
          if(input) input.focus();
        }, 100);
      });
    }

document.addEventListener('astro:page-load', () => {
    bindMenuButton()
    bindHomeButton()
    bindThemeToggle()
    bindSearchModal()
})
</script>

<style>
.hamburger .line{
  width: 28px;
  height: 2px;
  background-color: var(--font-color);
  display: block;
  margin: 8px auto;
  -webkit-transition: all 0.3s ease-in-out;
  -o-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
}

.hamburger:hover{
  cursor: pointer;
}

#hamburger{
  position: relative;
  -webkit-transition: all 0.3s ease-in-out;
  -o-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
}

#hamburger.is-active{
  -webkit-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  -o-transform: rotate(45deg);
  transform: rotate(45deg);
}

#hamburger:before{
  content: "";
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  width: 28px;
  height: 28px;
  -webkit-transition: all 0.3s ease-in-out;
  -o-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
}

#hamburger.is-active .line{
  width: 28px;
}

#hamburger.is-active .line:nth-child(2){
  opacity: 0;
}

#hamburger.is-active .line:nth-child(1){
  -webkit-transform: translateY(10px);
  -ms-transform: translateY(10px);
  -o-transform: translateY(10px);
  transform: translateY(10px);
}

#hamburger.is-active .line:nth-child(3){
  -webkit-transform: translateY(-10px) rotate(90deg);
  -ms-transform: translateY(-10px) rotate(90deg);
  -o-transform: translateY(-10px) rotate(90deg);
  transform: translateY(-10px) rotate(90deg);
}
</style>

