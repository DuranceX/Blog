---
import { getPosts } from "@/utils/collections"
const { show } = Astro.props;

const posts = await getPosts();
---
<search-modal id="search-modal">
  {show && (
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black/40" style="backdrop-filter: blur(2px);" id="search-modal-bg">
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg w-full max-w-xl p-8 relative flex flex-col max-h-4/5" id="search-modal-content">
        <button class="absolute -right-8 top-2 text-4xl text-white" aria-label="关闭" id="search-modal-close">&times;</button>
        <input
          type="text"
          class="w-full p-2 border rounded mb-4 dark:bg-gray-700 dark:text-white"
          placeholder="搜索文章标题、标签、内容..."
          id="search-input"
          autofocus
        />
        <div id="search-loading" class="text-center py-4" style="display:none;">搜索中...</div>
        <div id="search-noresult" class="text-center py-4" style="display:none;">无结果</div>
        <ul id="search-result-list" class="flex flex-col overflow-scroll"></ul>
        <div class="flex justify-between items-center mt-4" id="search-pagination" style="display:none;">
          <button id="search-prev" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 disabled:opacity-50">上一页</button>
          <span id="search-page-info" class="text-sm"></span>
          <button id="search-next" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 disabled:opacity-50">下一页</button>
        </div>
      </div>
    </div>
  )}
</search-modal>

<script type="module" define:vars={{posts}}>
class SearchModal extends HTMLElement {
  connectedCallback(){
    async function searchPosts(query) {
      if (!query.trim()) {
        return [];
      }

      console.log('begin search:', query);

      const results = [];
      const searchTerm = query.toLowerCase().trim();

      posts.forEach((post) => {
        let score = 0;
        const matchedFields = [];

        // 搜索标题 (权重最高)
        if (post.data.title.toLowerCase().includes(searchTerm)) {
          score += 10;
          matchedFields.push('title');
        }

        // 搜索标签 (权重较高)
        if (post.data.tags.some((tag) => tag.toLowerCase().includes(searchTerm))) {
          score += 5;
          matchedFields.push('tags');
        }

        // 搜索描述 (中等权重)
        if (post.data.description && post.data.description.toLowerCase().includes(searchTerm)) {
          score += 3;
          matchedFields.push('description');
        }

        // 搜索内容 (权重较低)
        if (post.body.toLowerCase().includes(searchTerm)) {
          score += 1;
          matchedFields.push('content');
        }

        // 如果有匹配，添加到结果中
        if (score > 0) {
          results.push({
            post,
            score,
            matchedFields
          });
        }
      });

      // 按分数排序，分数越高越靠前
      return results.sort((a, b) => b.score - a.score);
    }

    // 高亮搜索词
    function highlightSearchTerm(text, searchTerm) {
      if (!searchTerm.trim()) return text;
      
      const regex = new RegExp(`(${searchTerm.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
      return text.replace(regex, '<mark class="bg-yellow-200 dark:bg-yellow-600">$1</mark>');
    }

    // 截取内容片段，显示搜索词上下文
    function getContentSnippet(content, searchTerm, maxLength = 150) {
      if (!searchTerm.trim()) return content.slice(0, maxLength);
      
      const lowerContent = content.toLowerCase();
      const lowerTerm = searchTerm.toLowerCase();
      const index = lowerContent.indexOf(lowerTerm);
      
      if (index === -1) return content.slice(0, maxLength);
      
      const start = Math.max(0, index - 50);
      const end = Math.min(content.length, index + searchTerm.length + 80);
      
      let snippet = content.slice(start, end);
      if (start > 0) snippet = '...' + snippet;
      if (end < content.length) snippet = snippet + '...';
      
      return snippet;
    }
    
    let query = '';
    let allResults = [];
    let page = 1;
    const pageSize = 5;
    const input = document.getElementById('search-input');
    const resultList = document.getElementById('search-result-list');
    const loadingDiv = document.getElementById('search-loading');
    const noResultDiv = document.getElementById('search-noresult');
    const pagination = document.getElementById('search-pagination');
    const prevBtn = document.getElementById('search-prev');
    const nextBtn = document.getElementById('search-next');
    const pageInfo = document.getElementById('search-page-info');

    function renderPage() {
      resultList.innerHTML = '';
      if (allResults.length === 0) {
        pagination.style.display = 'none';
        return;
      }
      const totalPages = Math.ceil(allResults.length / pageSize);
      const start = (page - 1) * pageSize;
      const end = Math.min(start + pageSize, allResults.length);
      allResults.slice(start, end).forEach(({ post }) => {
        const li = document.createElement('li');
        li.className = 'py-2 border-b last:border-b-0 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700';
        li.innerHTML = `
          <div class="font-bold" >${highlightSearchTerm(post.data.title, query)}</div>
          <div class="text-sm mt-1">${highlightSearchTerm(getContentSnippet(post.body, query), query)}</div>
        `;
        li.onclick = () => { window.location.href = `/posts/${post.slug}`; };
        resultList.appendChild(li);
      });
      pagination.style.display = totalPages > 1 ? '' : 'none';
      prevBtn.disabled = page === 1;
      nextBtn.disabled = page === totalPages;
      pageInfo.textContent = `第 ${page} / ${totalPages} 页`;
    }

    if (input) {
      input.oninput = async (e) => {
        query = e.target.value.trim();
        resultList.innerHTML = '';
        page = 1;
        allResults = [];
        pagination.style.display = 'none';
        if (!query) {
          loadingDiv.style.display = 'none';
          noResultDiv.style.display = 'none';
          return;
        }
        loadingDiv.style.display = '';
        noResultDiv.style.display = 'none';
        // ({ searchPosts, highlightSearchTerm, getContentSnippet } = await import('/src/utils/search.ts'));
        allResults = await searchPosts(query);
        loadingDiv.style.display = 'none';
        if (allResults.length === 0) {
          noResultDiv.style.display = '';
          return;
        }
        renderPage();
      };
    }
    if (prevBtn) {
      prevBtn.onclick = () => {
        if (page > 1) {
          page--;
          renderPage();
        }
      };
    }
    if (nextBtn) {
      nextBtn.onclick = () => {
        const totalPages = Math.ceil(allResults.length / pageSize);
        if (page < totalPages) {
          page++;
          renderPage();
        }
      };
    }
    // 每次打开时 focus
    if (input) setTimeout(() => input.focus(), 100);
  }
}

customElements.define('search-modal', SearchModal);
</script>
